# -*- coding: utf-8 -*-
"""LVADSUSR190_SWEATHA_S_FA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_-o9V_FIKqloh0woG1UZFlmhsaDoXivZ
"""

#1.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Final Dataset - IPL.csv')
#print("Top data ")
#print(df.head(5))
#print("Bottom data ")
#print(df.tail(5))
print("Info ")
print(df.info())
print("Description ")
print(df.describe())
print("Shape of dataset ")
print(df.shape)
print("Columns of datset ")
print(df.columns)
print("Datatypes ")
print(df.dtypes)
print("Number of null values ")
print(df.isnull().sum())
print("Duplicates")
print(df.duplicated())

#2.

print("Number of null values ")
print(df.isnull().sum())
df.fillna(0)

""" Number of null values in each column is printed which is 0 for all columns.
fillna(0) fills null values with zero if any
"""
print(df.shape)
df.duplicated()
df.drop_duplicates()
print(df.shape)

"""if duplicate values are present df.dupliacted() will return True else False.
drop_dupliactes will drop duplicates if any
"""

#3.
for column in df.select_dtypes(include = ['int64','float64']):
  print(f"Mean of {column} = {df[column].mean()}")
  print(f"Median of {column}  =  {df[column].median()}")
  print(f"Standard Deviation of {column} = { df[column].std()}")
  print(f"Variance of {column} = {df[column].var()}")
  print(f"Mode of {column} \n {df[column].mode()}")

#4.

#print(df.head(5))

plt.title('Distribution of matches in various venues')
p1 = df.groupby('venue').aggregate({'match_id':'count'})
print(p1)
plt.pie(p1['match_id'],labels = df['venue'].unique(),autopct = '%1.1f%%')
plt.show()

plt.title('Top 5 players winning the man of the match')
p1 = df.groupby('player_of_the_match').aggregate({'match_id':'count'}).sort_values(by="match_id", ascending = False).head(5)
print(p1)
plt.bar(p1.index,p1['match_id'])
plt.xlabel('Players')
plt.ylabel('No. of matches being the man of the match')
plt.show()

plt.title('Top 5 scorers')
p2 = df.groupby('top_scorer').aggregate({'highscore':'sum'}).sort_values(by="highscore", ascending = False).head(5)
print(p2)
plt.bar(p2.index,p2['highscore'],color = 'hotpink')
plt.xlabel('Players')
plt.ylabel('Scores')
plt.show()

plt.title('Wins of teams')
p3 = df.groupby('team1').aggregate({'match_winner':'count'}).sort_values(by="match_winner", ascending = False)
print(p3)
plt.bar(p3.index,p3['match_winner'])
plt.xlabel('Teams')
plt.ylabel('No. of matches won')
plt.xticks(rotation=90)
plt.show()

#5.
print("Correlation")
print(df.select_dtypes(include = ['int64','float64']).corr())

#6.
#print(df.head(5))
plt.title("First innings score")
sns.boxplot(x= df['team1'],y=df['first_ings_score'])
plt.xticks(rotation=90)
plt.show()

plt.title("Second innings score")
sns.boxplot(x = df['team2'],y=df['second_ings_score'])
plt.xticks(rotation=90)
plt.show()

'''This tells the least and very high scores of teams in innings as they are the outliers
In order to visualize the outliers boxplots are used
in order to handle outliers zscores are used
Outliers will cause data entry errors, sampling errors, measurement errors, experimental errors etc.
Hence the outliers have to be removed while sampling the dataset
'''
from scipy import stats

z_scores1 = np.abs(stats.zscore(df['first_ings_score']))
z_scores2 = np.abs(stats.zscore(df['second_ings_score']))
print(z_scores1)
print(z_scores2)

z_threshold =2
outliers1 = z_scores1[z_scores1>z_threshold]
outliers2 = z_scores2[z_scores2>z_threshold]
print(outliers1)
print(outliers2)

#7.

#print(df.head(5))

h1 = df.groupby(['match_winner']).aggregate({"match_id":"count"})
print(h1)
plt.title("Winners across matches")
plt.pie(h1['match_id'],labels = h1.index, autopct = '%1.1f%%')
plt.show()

h2 = df.groupby(['venue']).aggregate({"highscore":"max"})
print(h2)
plt.title("Top individual score in venues")
plt.bar(h2.index,h2['highscore'])
plt.xticks(rotation =90)
plt.show()

# 8.

#print(df.head())
plt.title('Top 5 players winning the man of the match')
p1 = df.groupby('player_of_the_match').aggregate({'match_id':'count'}).sort_values(by="match_id", ascending = False).head(5)
print(p1)
plt.bar(p1.index,p1['match_id'])
plt.xlabel('Players')
plt.ylabel('No. of matches being the man of the match')
plt.show()


h2 = df.groupby(['top_scorer']).aggregate({"highscore":"max"}).sort_values(by="highscore",ascending =False).head(10)
print(h2)
plt.title("Top individual scores")
plt.bar(h2.index,h2['highscore'],color = 'hotpink')
plt.xticks(rotation =90)
plt.show()

h3 = df.groupby(['best_bowling']).aggregate({"match_id":"count"}).sort_values(by="match_id",ascending =False).head(10)
print(h3)
plt.title("Best bowling performance")
plt.bar(h3.index,h3['match_id'])
plt.xticks(rotation =90)
plt.show()

#9.

'''
Basic information about the dataset like number of columns and rows, datatypes of columns
shape of dataset, presence of null values and dupliacte values is extracted.

Null values are found and replaced with a meaningful value.
Duplicate values are found and dropped to avoid errors during sampling

Descriptive statistic analysis is performed by calculation mean, median, mode, standard deviation
and variance for various attributes such as scores, wickets etc.

Visualization of patterns using charts to understand
   -->  distribution of matches in various venues
   -->  top 5 players who has won the man of the match frequently
   -->  top 5 high scoring players
   -->  number of matches won by each team

Correlation of various attributes is studied to observe how one factor affects the other
like how the choice of venues affect the scores or how the choice of toss decision affects the
winning chance etc.

Outliers are identified in the dataset using boxplots
This tells the least and very high scores of teams in innings as they are the outliers
in order to handle outliers zscores are used
Outliers will cause data entry errors, sampling errors, measurement errors, experimental errors etc.
Hence the outliers have to be removed while sampling the dataset

venues affecting Performance of teams winning chance are studied using visualization tools

Top scorers and bowlers are identified to recognize high performing players


'''