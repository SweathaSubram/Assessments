# -*- coding: utf-8 -*-
"""LVADSUSR190_SweathaS_PA_IA1_Q1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/101e_gy_VzeHcPhE1kGmuVAjByP2btq1l
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from sklearn.preprocessing import MinMaxScaler, StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

df = pd.read_csv('/content/expenses.csv')
df.head()

df.shape

df.describe(include="all").T

df.info()

df.isnull().sum()

#Handling null values

df['bmi'] = df['bmi'].fillna(df['bmi'].mean())
df.isnull().sum()

#Handling duplicates
df.duplicated().sum()

dupl = df[df.duplicated(keep = False)]
print(dupl)

df.drop_duplicates(inplace = True)
df.duplicated().sum()

# detecting and handling outliers
for column in df.select_dtypes(include = "number"):
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include = "number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  df[column] = df[column].clip(lower = lower, upper= upper)
  sns.boxplot(df[column])
  plt.show()

#Feature selection by checking correlation
cor_matrix = df.select_dtypes(include = 'number').corr()
print("Correlation matrix")
print(cor_matrix)
sns.heatmap(cor_matrix,annot=True,fmt = ".2f",cmap = "coolwarm")
plt.show()

num = df.select_dtypes(include="number").columns
for i in range(len(num)):
  for j in range(i+1,len(num)):
    sns.scatterplot(data = df, x = num[i], y =num[j])
    plt.show()

#Feature encoding
len = LabelEncoder()
for column in df.select_dtypes(include = 'object'):
  df[column] = len.fit_transform(df[column])
df.head()

x = df.drop(columns = ['charges'])
y = df['charges']

#splitting data
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state = 42)

#Model building
model = LinearRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)
print(y_pred)

#Model evaluation
print("R-squared: ", r2_score(y_test,y_pred))
print("Root mean square error: ",mean_squared_error(y_test,y_pred,squared=False))
print("Mean square error: ",mean_squared_error(y_test,y_pred))