# -*- coding: utf-8 -*-
"""LVADSUSR190_SweathaS_PA_IA1_Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pbR46V8eWQ7_2S-YHUfj26RtxfeSss6
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

from sklearn.preprocessing import MinMaxScaler, StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

df = pd.read_csv('/content/booking.csv')
df.head()

df.shape

df.info()

df.describe(include="all").T

df.isnull().sum()

#Handling null values

df['average price'] = df['average price'].fillna(df['average price'].mean())
df['room type'] = df['room type'].fillna(df['room type'].mode()[0])
df.isnull().sum()

#Handling duplicates
df.duplicated().sum()
# zero duplicates

# detecting and handling outliers
for column in df.select_dtypes(include = "number"):
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include = "number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  df[column] = df[column].clip(lower = lower, upper= upper)
  sns.boxplot(df[column])
  plt.show()

#Feature selection by checking correlation
cor_matrix = df.select_dtypes(include = 'number').corr()
print("Correlation matrix")
print(cor_matrix)
sns.heatmap(cor_matrix,annot=True,fmt = ".2f",cmap = "coolwarm")
plt.show()

num = df.select_dtypes(include="number").columns
for i in range(len(num)):
  for j in range(i+1,len(num)):
    sns.scatterplot(data = df, x = num[i], y =num[j])
    plt.show()

#dropping irrelevant features
df = df.drop(columns = ['Booking_ID','date of reservation'])

#Feature encoding
len = LabelEncoder()
for column in df.select_dtypes(include = 'object'):
  df[column] = len.fit_transform(df[column])
df.head()

x = df.drop(columns = ['booking status'])
y = df['booking status']

#splitting data
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state = 42)

#model building
model = LogisticRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

#model evaluation
print("Classification Report: ")
print(classification_report(y_test,y_pred))
print("Confusion Matrix: ")
print(confusion_matrix(y_test,y_pred))