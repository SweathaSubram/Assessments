# -*- coding: utf-8 -*-
"""LVADSUSR190_PA_IA2_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IgH9-7vUjpPt1DSPxWMfQGGOOevUb046
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE

from sklearn.metrics import confusion_matrix, classification_report

df = pd.read_csv('/content/winequality-red.csv')
df.head()

df.shape

df.info()

df.describe(include="all").T

df.isnull().sum()

for column in df.select_dtypes(include="number"):
  df[column] = df[column].fillna(df[column].mean())
df.isnull().sum()

for column in df.select_dtypes(include="number"):
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include="number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1-1.5*iqr
  upper = q3+1.5*iqr
  df[column] = df[column].clip(lower=lower,upper=upper)
  sns.boxplot(df[column])
  plt.show()

df.duplicated().sum()

dups = df[df.duplicated()]
print(dups)
df.drop_duplicates(inplace = True)
df.duplicated().sum()

cor = df.select_dtypes(include = "number").corr()
print("Correlation matrix")
print(cor)
sns.heatmap(cor, annot=True,fmt = ".2f",cmap = "coolwarm")
plt.show()

df[df['quality']<=6] = 0
df[df['quality']>6] = 1
df['quality'].value_counts()

sm = SMOTE()
df = pd.DataFrame(sm.fit_resample(df,df['quality']))
df['quality'].value_counts()

x = df.drop(columns = ['quality'])
y = df['quality']

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.3, random_state = 42)

model = RandomForestClassifier(n_estimators = 100, random_state = 42)
model.fit(x_train,y_train)

y_pred = model.predict(x_test)
print(y_pred)

print("Classification report")
print(classification_report(y_test,y_pred))
print("Confusion matrix")
print(confusion_matrix(y_test,y_pred))