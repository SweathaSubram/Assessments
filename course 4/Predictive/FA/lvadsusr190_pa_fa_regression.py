# -*- coding: utf-8 -*-
"""LVADSUSR190_PA_FA_Regression

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiZZIjpX8Kr-q4hogZNpXG6VKKfN_tzI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor

df = pd.read_csv('/content/Fare prediction.csv')
df.head()

df.shape

df.info()

df.describe(include = "all").T

df.isnull().sum()
#No null values

df.duplicated().sum()
#No duplicates

#Outliers
for column in df.select_dtypes(include="number"):
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include="number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5*iqr
  df[column] = df[column].clip(lower=lower,upper=upper)
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include="number"):
  sns.histplot(df[column])
  plt.show()

cor = df.select_dtypes(include="number").corr()
print("Correlation matrix")
print(cor)
sns.heatmap(cor, annot=True, fmt=".2f",cmap = "coolwarm")
plt.show()

len = LabelEncoder()
df["pickup_datetime"] = len.fit_transform(df["pickup_datetime"])

df.columns

df.columns
x = df.drop(columns = ["fare_amount","key"])
y = df["fare_amount"]

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state =42)

scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

model = LinearRegression()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

print("Mean square error: ",mean_squared_error(y_test,y_pred))
print("Root mean square error: ",mean_squared_error(y_test,y_pred,squared =False))
print("R2 score: ",r2_score(y_test,y_pred))

model = XGBRegressor()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

print("Mean square error: ",mean_squared_error(y_test,y_pred))
print("Root mean square error: ",mean_squared_error(y_test,y_pred,squared =False))
print("R2 score: ",r2_score(y_test,y_pred))

#XGB Regressor is a better model