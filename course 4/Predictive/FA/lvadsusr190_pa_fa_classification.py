# -*- coding: utf-8 -*-
"""LVADSUSR190_PA_FA_Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A2Fc_YgBx5pkLt8P0wQAlj_tOuI9McVC
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from xgboost import XGBClassifier

df = pd.read_csv('/content/penguins_classification.csv')
df.head()

df.shape

df.info()

df.describe(include = "all").T

df.isnull().sum()

h = df.groupby("species")["bill_depth_mm"].mean()
print(h)
d = df[df["bill_depth_mm"].isna()]
print(d)
df["bill_depth_mm"]  = df["bill_depth_mm"].fillna(h[0])

df.isnull().sum()

df.duplicated().sum()
#zero duplicates

#Outliers
for column in df.select_dtypes(include="number"):
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include="number"):
  q1 = df[column].quantile(0.25)
  q3 = df[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5*iqr
  df[column] = df[column].clip(lower=lower,upper=upper)
  sns.boxplot(df[column])
  plt.show()

for column in df.select_dtypes(include="number"):
  sns.histplot(df[column])
  plt.show()

for column in df.select_dtypes(include="object"):
  df[column].value_counts().plot(kind = "bar")
  plt.show()

cor = df.select_dtypes(include="number").corr()
print("Correlation matrix")
print(cor)
sns.heatmap(cor, annot=True, fmt=".2f",cmap = "coolwarm")
plt.show()

len = LabelEncoder()
df["species"] = len.fit_transform(df["species"])
df["island"] = len.fit_transform(df["island"])

df.head()

x= df.drop(columns=['species','island','year'])
y = df['species']

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3, random_state =42)

model = RandomForestClassifier(n_estimators = 100, random_state =42)
model.fit(x_train,y_train)

y_pred = model.predict(x_test)
print(y_pred)

print("Classification Report")
print(classification_report(y_test,y_pred))

print("Confusion matrix")
print(confusion_matrix(y_test,y_pred))
sns.heatmap(confusion_matrix(y_test,y_pred),annot=True,fmt='g')
plt.show()

model = XGBClassifier()
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

print("Confusion matrix")
print(confusion_matrix(y_test,y_pred))
sns.heatmap(confusion_matrix(y_test,y_pred),annot=True,fmt='g')
plt.show()
print("Classification Report")
print(classification_report(y_test,y_pred))