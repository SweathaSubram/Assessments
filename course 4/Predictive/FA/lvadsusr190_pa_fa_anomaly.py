# -*- coding: utf-8 -*-
"""LVADSUSR190_PA_FA_Anomaly

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19m_THwQ-lFyrULqOqI68bPQuL72eNgww
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")
from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
from sklearn.ensemble import IsolationForest

df = pd.read_csv('/content/anomaly_train.csv')
df.head()

df.shape

df.info()

df.describe(include="all").T

df.isnull().sum()
#0 null values

df.duplicated().sum()
#zero duplicates

for column in df.select_dtypes(include="number"):
  sns.histplot(df[column])
  plt.show()

for column in df.select_dtypes(include="object"):
  df[column].value_counts().plot(kind = "bar")
  plt.show()

cor = df.select_dtypes(include="number").corr()
print("Correlation matrix")
print(cor)
sns.heatmap(cor, annot=True, fmt=".2f",cmap = "coolwarm")
plt.show()

len = LabelEncoder()
for column in df.select_dtypes(include="object"):
  df[column] = len.fit_transform(df[column])

x = df
model = IsolationForest(n_estimators = 100,contamination = 0.1)
model.fit(x)

pred = model.predict(x)
print(pred)

df['anomaly_score'] = model.decision_function(x)
anomalies = df[df['anomaly_score']<0]
anomalies.head()

plt.scatter(df['Amount'],df['anomaly_score'],color = "yellow", label = "normal")
plt.scatter(anomalies['Amount'],anomalies['anomaly_score'],color = "red", label = "Anomaly")
plt.legend()
plt.xlabel("Amount")
plt.ylabel("Anomaly score")
plt.show()

plt.scatter(df['Location'],df['anomaly_score'],color = "yellow", label = "normal")
plt.scatter(anomalies['Location'],anomalies['anomaly_score'],color = "red", label = "Anomaly")
plt.legend()
plt.xlabel("Location")
plt.ylabel("Anomaly score")
plt.show()

plt.scatter(df['Type'],df['anomaly_score'],color = "yellow", label = "normal")
plt.scatter(anomalies['Type'],anomalies['anomaly_score'],color = "red", label = "Anomaly")
plt.legend()
plt.xlabel("Type")
plt.ylabel("Anomaly score")
plt.show()

plt.scatter(df['Time'],df['anomaly_score'],color = "yellow", label = "normal")
plt.scatter(anomalies['Time'],anomalies['anomaly_score'],color = "red", label = "Anomaly")
plt.legend()
plt.xlabel("Time")
plt.ylabel("Anomaly score")
plt.show()

plt.scatter(df['User'],df['anomaly_score'],color = "yellow", label = "normal")
plt.scatter(anomalies['User'],anomalies['anomaly_score'],color = "red", label = "Anomaly")
plt.legend()
plt.xlabel("User")
plt.ylabel("Anomaly score")
plt.show()

df['Anomaly behavior'] = pred
df['Anomaly behavior'] = df['Anomaly behavior'].replace(1,"Normal")
df['Anomaly behavior'] = df['Anomaly behavior'].replace(-1,"Anomaly")

df.head(20)